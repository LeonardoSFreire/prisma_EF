const { chromium } = require('playwright');

// Configura√ß√µes do site
const CONFIG = {
    LOGIN_URL: 'https://app.prismabox.com.br/login',
    BOXES_URL: 'https://app.prismabox.com.br/box',
    CREDENTIALS: {
        email: 'leonardo.freire',
        password: 'Boxfacil145@'
    },
    // Seletores CSS - baseados na an√°lise da estrutura real da p√°gina
    SELECTORS: {
        usernameInput: 'input[name="username"][required]',
        passwordInput: 'input[name="password"]',
        loginButton: 'button[type="submit"].btn.blue.btn-enter:not(.btn-block)',
        // Menu lateral
        boxesMenuLink: 'a[href*="/box"], a:has-text("Boxes")',
        // Seletores para a p√°gina de boxes - ser√£o ajustados ap√≥s an√°lise
        boxesContainer: 'table, .table, [data-boxes-container]', // Container principal dos boxes
        boxItems: 'tr, .box-item, [data-box-item]', // Itens individuais dos boxes
        boxNumber: 'td:first-child, .box-number, [data-box-number]', // N√∫mero do box
        boxSize: 'td:nth-child(2), .box-size, [data-box-size]', // Tamanho do box
        boxStatus: 'td:nth-child(3), .box-status, [data-box-status]', // Status do box
        boxPrice: 'td:nth-child(4), .box-price, [data-box-price]', // Pre√ßo do box
        // Filtros
        statusFilter: 'select[name*="status"], select:has(option:has-text("DISPON√çVEL"))',
        availableOption: 'option:has-text("DISPON√çVEL"), option[value*="disponivel"]',
        filterButton: 'button:has-text("Filtrar"), button[type="submit"]',
        // Pagina√ß√£o
        paginationNext: 'a:has-text("Pr√≥ximo"), a:has-text("Next"), .pagination .next',
        paginationContainer: '.pagination, [data-pagination]'
    }
};

/**
 * Fun√ß√£o principal para buscar boxes dispon√≠veis
 * @returns {Promise<Array>} Array com os boxes dispon√≠veis
 */
async function buscarBoxesDisponiveis() {
    let browser = null;
    
    try {
        console.log('üöÄ Iniciando automa√ß√£o...');
        
        // Inicializar o navegador
        browser = await chromium.launch({ 
            headless: false, // Para facilitar depura√ß√£o
            slowMo: 1000 // Adiciona delay entre a√ß√µes para melhor visualiza√ß√£o
        });
        
        const page = await browser.newPage();
        
        // Configurar timeout padr√£o
        page.setDefaultTimeout(30000);
        
        console.log('üåê Navegando para p√°gina de login...');
        await page.goto(CONFIG.LOGIN_URL);
        
        // Aguardar carregamento da p√°gina
        await page.waitForLoadState('networkidle');
        
        console.log('üîê Realizando login...');
        
        // Aguardar que os campos estejam vis√≠veis
        await page.waitForSelector(CONFIG.SELECTORS.usernameInput, { state: 'visible' });
        await page.waitForSelector(CONFIG.SELECTORS.passwordInput, { state: 'visible' });
        
        // Preencher credenciais
        await page.locator(CONFIG.SELECTORS.usernameInput).fill(CONFIG.CREDENTIALS.email);
        await page.locator(CONFIG.SELECTORS.passwordInput).fill(CONFIG.CREDENTIALS.password);
        
        // Aguardar que o bot√£o esteja vis√≠vel e clic√°vel
        await page.waitForSelector(CONFIG.SELECTORS.loginButton, { state: 'visible' });
        
        // Clicar no bot√£o de login
        await page.locator(CONFIG.SELECTORS.loginButton).click();
        
        // Aguardar redirecionamento ap√≥s login
        await page.waitForNavigation();
        
        console.log('‚úÖ Login realizado com sucesso!');
        
        // Lidar com modal de notifica√ß√µes
        console.log('üîî Verificando modal de notifica√ß√µes...');
        try {
            // Aguardar o modal aparecer e clicar em "N√£o"
            await page.waitForSelector('button:has-text("N√£o")', { timeout: 5000 });
            await page.click('button:has-text("N√£o")');
            console.log('‚úÖ Modal de notifica√ß√µes fechado');
            
            // Aguardar um pouco para o modal desaparecer
            await page.waitForTimeout(1000);
        } catch (error) {
            console.log('‚ÑπÔ∏è Modal de notifica√ß√µes n√£o encontrado ou j√° fechado');
        }
        
        // Navegar para p√°gina de boxes
        console.log('üì¶ Navegando para p√°gina de boxes...');
        
        // Navegar diretamente para a URL de boxes (mais confi√°vel)
        await page.goto(CONFIG.BOXES_URL);
        await page.waitForLoadState('networkidle');
        console.log('‚úÖ P√°gina de boxes carregada');
        
        console.log(`üåê URL atual: ${page.url()}`);
        
        console.log('üîç Aplicando filtro para boxes dispon√≠veis...');
        
        // Aguardar carregamento da tabela de boxes
        await page.waitForSelector(CONFIG.SELECTORS.boxesContainer, { state: 'visible' });
        
        // Tentar aplicar filtro de status se dispon√≠vel
        try {
            const statusFilter = page.locator(CONFIG.SELECTORS.statusFilter);
            if (await statusFilter.isVisible()) {
                console.log('üìã Filtro de status encontrado, aplicando...');
                await statusFilter.click();
                
                // Selecionar op√ß√£o "DISPON√çVEL"
                const availableOption = page.locator(CONFIG.SELECTORS.availableOption);
                if (await availableOption.isVisible()) {
                    await availableOption.click();
                    
                    // Clicar no bot√£o de filtrar se existir
                    const filterButton = page.locator(CONFIG.SELECTORS.filterButton);
                    if (await filterButton.isVisible()) {
                        await filterButton.click();
                        await page.waitForLoadState('networkidle');
                    }
                }
            } else {
                console.log('‚ö†Ô∏è Filtro de status n√£o encontrado, extraindo todos os boxes...');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao aplicar filtro, continuando com extra√ß√£o completa:', error.message);
        }
        
        console.log('üìä Extraindo dados dos boxes...');
        
        const boxesDisponiveis = [];
        
        // Implementar extra√ß√£o de dados dos boxes
        let hasNextPage = true;
        let currentPage = 1;
        
        while (hasNextPage) {
            console.log(`üìÑ Processando p√°gina ${currentPage}...`);
            
            try {
                // Aguardar carregamento dos itens da tabela
                await page.waitForSelector(CONFIG.SELECTORS.boxItems, { timeout: 10000 });
                
                const boxItems = await page.locator(CONFIG.SELECTORS.boxItems).all();
                console.log(`üì¶ Encontrados ${boxItems.length} itens na p√°gina ${currentPage}`);
                
                for (let i = 0; i < boxItems.length; i++) {
                    const item = boxItems[i];
                    
                    try {
                        // Extrair dados de cada box
                        const numero = await item.locator(CONFIG.SELECTORS.boxNumber).innerText().catch(() => 'N/A');
                        const tamanho = await item.locator(CONFIG.SELECTORS.boxSize).innerText().catch(() => 'N/A');
                        const status = await item.locator(CONFIG.SELECTORS.boxStatus).innerText().catch(() => 'N/A');
                        const preco = await item.locator(CONFIG.SELECTORS.boxPrice).innerText().catch(() => 'N/A');
                        
                        // Verificar se est√° dispon√≠vel (ignorando mai√∫sculas/min√∫sculas)
                        if (status.toLowerCase().includes('dispon√≠vel') || 
                            status.toLowerCase().includes('disponivel') ||
                            status.toLowerCase().includes('available')) {
                            
                            boxesDisponiveis.push({
                                numero: numero.trim(),
                                tamanho: tamanho.trim(),
                                status: status.trim(),
                                preco: preco.trim(),
                                pagina: currentPage
                            });
                            
                            console.log(`‚úÖ Box ${numero} - ${status} adicionado`);
                        }
                    } catch (itemError) {
                        console.log(`‚ö†Ô∏è Erro ao processar item ${i + 1}:`, itemError.message);
                    }
                }
                
                // Verificar se h√° pr√≥xima p√°gina
                const nextButton = page.locator(CONFIG.SELECTORS.paginationNext);
                const isNextButtonVisible = await nextButton.isVisible().catch(() => false);
                const isNextButtonEnabled = await nextButton.isEnabled().catch(() => false);
                
                if (isNextButtonVisible && isNextButtonEnabled) {
                    console.log(`‚û°Ô∏è Navegando para p√°gina ${currentPage + 1}...`);
                    await nextButton.click();
                    await page.waitForLoadState('networkidle');
                    currentPage++;
                } else {
                    hasNextPage = false;
                    console.log('üìÑ √öltima p√°gina processada');
                }
                
            } catch (pageError) {
                console.log(`‚ùå Erro ao processar p√°gina ${currentPage}:`, pageError.message);
                hasNextPage = false;
            }
        }
        
        console.log(`üìã Encontrados ${boxesDisponiveis.length} boxes dispon√≠veis`);
        
        return boxesDisponiveis;
        
    } catch (error) {
        console.error('‚ùå Erro durante a execu√ß√£o:', error.message);
        throw error;
    } finally {
        // Garantir que o navegador seja fechado
        if (browser) {
            console.log('üîí Fechando navegador...');
            await browser.close();
        }
    }
}

// Executar fun√ß√£o principal
buscarBoxesDisponiveis()
    .then(boxes => {
        console.log('\nüéØ RESULTADO FINAL:');
        console.log('=====================================');
        
        if (boxes.length === 0) {
            console.log('‚ùå Nenhum box dispon√≠vel encontrado.');
        } else {
            console.log(`‚úÖ Total de boxes dispon√≠veis: ${boxes.length}`);
            console.log('\nüì¶ BOXES DISPON√çVEIS:');
            console.log('=====================================');
            
            boxes.forEach((box, index) => {
                console.log(`\n${index + 1}. Box ${box.numero}`);
                console.log(`   Tamanho: ${box.tamanho}`);
                console.log(`   Status: ${box.status}`);
                console.log(`   Pre√ßo: ${box.preco}`);
                console.log(`   P√°gina: ${box.pagina}`);
            });
        }
        
        console.log('\n=====================================');
        console.log('üèÅ Processo finalizado com sucesso!');
    })
    .catch(error => {
        console.error('\n‚ùå ERRO DURANTE EXECU√á√ÉO:');
        console.error('=====================================');
        console.error(error.message);
        console.error('=====================================');
        process.exit(1);
    });

// Executar apenas se este arquivo for chamado diretamente
if (require.main === module) {
    // C√≥digo j√° executado acima
}

module.exports = {
    buscarBoxesDisponiveis,
    CONFIG
};